## logging
logging.level.root=${LOG_LEVEL:INFO}
logging.level.org.hibernate=ERROR
logging.level.org.springframework.web=${LOG_LEVEL:WARN}
logging.file=data/myretail.log
logging.pattern.console=%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr([%12.12t]){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(%logger{39}){cyan}.%clr(%M{15}\\(%line\\)){cyan} :: %msg%n
logging.pattern.file=%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr([%12.12t]){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(%logger{39}){cyan}.%clr(%M{15}\\(%line\\)){cyan} :: %msg%n


###*************************************************************************************************************************

## Server Configs
server.port=${SERVER_PORT:8080}
spring.profiles.active=${SPRING_PROFILE_ACTIVE:local}
# Maximum number of connections that the server will accept and process at any given time.
server.tomcat.max-connections=500000
# Maximum amount of worker threads.
server.tomcat.max-threads=500000
# Maximum size in bytes of the HTTP message header.
server.max-http-header-size=40960


## External API URL
external.host=https://redsky.target.com
external.endpoint = v2/pdp/tcin
external.params = 13860428?excludes=taxonomy,price,promotion,bulk_ship,rating_and_review_reviews,rating_and_review_statistics,question_answer_statistics

external.api.url=${EXTERNAL_API:${external.host}/${external.endpoint}/${external.params}}
external.name.depth=product,deep_red_labels,labels
external.name.key=name
## Spring boot Actuator config
management.server.port=9001
management.server.ssl.enabled=false
management.endpoint.shutdown.enabled=true
management.endpoints.enabled-by-default=true
management.endpoint.info.enabled=true
management.endpoints.web.exposure.include=*
## ===============================
## = JPA / HIBERNATE
## ===============================
## Show or not log for each sql query
#spring.jpa.show-sql=true
## Hibernate ddl auto (create, create-drop, update): with "create-drop" the database
## schema will be automatically created afresh for every start of application
#spring.jpa.hibernate.ddl-auto=create-drop
## Allows Hibernate to generate SQL optimized for a particular DBMS
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.DerbyDialect
#spring.datasource.url=jdbc:derby:MallDB;create=true
## Cassandra properties from https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
#Keyspace name to use.
spring.data.cassandra.keyspace-name=mykeyspace
# Cluster node addresses.
spring.data.cassandra.contact-points=localhost
# Port of the Cassandra server.
spring.data.cassandra.port=9042
# Schema action to take at startup.
spring.data.cassandra.schema-action=create_if_not_exists
# Login user of the server
spring.data.cassandra.username=cassaandra
# Login password of the server.
spring.data.cassandra.password=cassaandra
#spring.data.cassandra.cluster-name= # Name of the Cassandra cluster.
#spring.data.cassandra.compression=none # Compression supported by the Cassandra binary protocol.
#spring.data.cassandra.connect-timeout= # Socket option: connection time out.
#spring.data.cassandra.consistency-level= # Queries consistency level.
#spring.data.cassandra.fetch-size= # Queries default fetch size.
#spring.data.cassandra.load-balancing-policy= # Class name of the load balancing policy.
#spring.data.cassandra.pool.heartbeat-interval=30s # Heartbeat interval after which a message is sent on an idle connection to make sure it's still alive. If a duration suffix is not specified, seconds will be used.
#spring.data.cassandra.pool.idle-timeout=120s # Idle timeout before an idle connection is removed. If a duration suffix is not specified, seconds will be used.
#spring.data.cassandra.pool.max-queue-size=256 # Maximum number of requests that get queued if no connection is available.
#spring.data.cassandra.pool.pool-timeout=5000ms # Pool timeout when trying to acquire a connection from a host's pool.
#spring.data.cassandra.read-timeout= # Socket option: read time out.
#spring.data.cassandra.reconnection-policy= # Reconnection policy class.
#spring.data.cassandra.repositories.type=auto # Type of Cassandra repositories to enable.
#spring.data.cassandra.retry-policy= # Class name of the retry policy.
#spring.data.cassandra.serial-consistency-level= # Queries serial consistency level.
#spring.data.cassandra.ssl=false # Enable SSL support.
